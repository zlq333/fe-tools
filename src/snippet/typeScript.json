{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}:any) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1}', ${1});",
    "description": "Displays an object in the console with its name"
  },
  "use useTable": {
    "prefix": "tableUse",
    "scope": "vue",
    "description": "use useTable，get tableUse",
    "body": [
      "const tableUse = useTable({ tableOptions, axiosConfig: { url: api.${1} } });\r",
      "tableUse.search();"
    ]
  },
  "submit": {
    "prefix": "submit",
    "scope": "vue",
    "description": "form表单提交",
    "body": [
      "const formDataRef: any = ref(null);",
      "const submit = (type: any) => {\r",
      "  formDataRef.value.validate(async (valid: boolean) => {\r",
      "    if (valid) {\r",
      "      let res = await XHR.post(api.${1}, { ...formData });\r",
      "        ElMessage.success('操作成功');\r",
      "      }\r",
      "    }\r",
      "  });\r",
      "};"
    ]
  },
  "confirm": {
    "prefix": "el-confirm",
    "scope": "vue",
    "description": "el-confirm组件",
    "body": [
      "ElMessageBox.confirm('确认${1}？', '提示', {\r",
      "  confirmButtonText: '确定',\r",
      "  cancelButtonText: '取消',\r",
      "  type: 'warning'\r",
      "}).then(async () => {\r",
      "  await XHR.post(api.${2}, { id: row.id });\r",
      "  ElMessage.success('操作成功');\r",
      "  useTableRes.search();\r",
      "});"
    ]
  },
  "el-dialog": {
    "prefix": "el-dialog",
    "scope": "vue",
    "description": "el-dialog组件",
    "body": [
      "<el-dialog title=\"${1}\" v-model=\"dialogVisible\" width=\"60%\">\r",
      "  <template #footer>\r",
      "    <span class=\"dialog-footer\">\r",
      "      <el-button @click=\"dialogVisible = false\">取消</el-button>\r",
      "      <el-button type=\"primary\" @click=\"submit\">确定</el-button>\r",
      "    </span>\r",
      "  </template>\r",
      "</el-dialog>"
    ]
  }
}
